// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: vlan.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VlanService_CreateVlan_FullMethodName  = "/vlan.VlanService/CreateVlan"
	VlanService_GetVlans_FullMethodName    = "/vlan.VlanService/GetVlans"
	VlanService_GetVlanById_FullMethodName = "/vlan.VlanService/GetVlanById"
)

// VlanServiceClient is the client API for VlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VlanServiceClient interface {
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error)
	GetVlans(ctx context.Context, in *GetVlansRequest, opts ...grpc.CallOption) (*GetVlansResponse, error)
	GetVlanById(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*GetVlanResponse, error)
}

type vlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVlanServiceClient(cc grpc.ClientConnInterface) VlanServiceClient {
	return &vlanServiceClient{cc}
}

func (c *vlanServiceClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVlanResponse)
	err := c.cc.Invoke(ctx, VlanService_CreateVlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanServiceClient) GetVlans(ctx context.Context, in *GetVlansRequest, opts ...grpc.CallOption) (*GetVlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVlansResponse)
	err := c.cc.Invoke(ctx, VlanService_GetVlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanServiceClient) GetVlanById(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*GetVlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVlanResponse)
	err := c.cc.Invoke(ctx, VlanService_GetVlanById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VlanServiceServer is the server API for VlanService service.
// All implementations must embed UnimplementedVlanServiceServer
// for forward compatibility.
type VlanServiceServer interface {
	CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error)
	GetVlans(context.Context, *GetVlansRequest) (*GetVlansResponse, error)
	GetVlanById(context.Context, *GetVlanRequest) (*GetVlanResponse, error)
	mustEmbedUnimplementedVlanServiceServer()
}

// UnimplementedVlanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVlanServiceServer struct{}

func (UnimplementedVlanServiceServer) CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (UnimplementedVlanServiceServer) GetVlans(context.Context, *GetVlansRequest) (*GetVlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlans not implemented")
}
func (UnimplementedVlanServiceServer) GetVlanById(context.Context, *GetVlanRequest) (*GetVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanById not implemented")
}
func (UnimplementedVlanServiceServer) mustEmbedUnimplementedVlanServiceServer() {}
func (UnimplementedVlanServiceServer) testEmbeddedByValue()                     {}

// UnsafeVlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VlanServiceServer will
// result in compilation errors.
type UnsafeVlanServiceServer interface {
	mustEmbedUnimplementedVlanServiceServer()
}

func RegisterVlanServiceServer(s grpc.ServiceRegistrar, srv VlanServiceServer) {
	// If the following call pancis, it indicates UnimplementedVlanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VlanService_ServiceDesc, srv)
}

func _VlanService_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServiceServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VlanService_CreateVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServiceServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VlanService_GetVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServiceServer).GetVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VlanService_GetVlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServiceServer).GetVlans(ctx, req.(*GetVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VlanService_GetVlanById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServiceServer).GetVlanById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VlanService_GetVlanById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServiceServer).GetVlanById(ctx, req.(*GetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VlanService_ServiceDesc is the grpc.ServiceDesc for VlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vlan.VlanService",
	HandlerType: (*VlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVlan",
			Handler:    _VlanService_CreateVlan_Handler,
		},
		{
			MethodName: "GetVlans",
			Handler:    _VlanService_GetVlans_Handler,
		},
		{
			MethodName: "GetVlanById",
			Handler:    _VlanService_GetVlanById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vlan.proto",
}
