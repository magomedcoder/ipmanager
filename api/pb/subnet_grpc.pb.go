// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: subnet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubnetService_CreateSubnet_FullMethodName          = "/subnet.SubnetService/CreateSubnet"
	SubnetService_GetSubnets_FullMethodName            = "/subnet.SubnetService/GetSubnets"
	SubnetService_GetSubnetById_FullMethodName         = "/subnet.SubnetService/GetSubnetById"
	SubnetService_EditSubnetVlan_FullMethodName        = "/subnet.SubnetService/EditSubnetVlan"
	SubnetService_EditSubnetDescription_FullMethodName = "/subnet.SubnetService/EditSubnetDescription"
)

// SubnetServiceClient is the client API for SubnetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubnetServiceClient interface {
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*CreateSubnetResponse, error)
	GetSubnets(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnetsResponse, error)
	GetSubnetById(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error)
	EditSubnetVlan(ctx context.Context, in *EditSubnetVlanRequest, opts ...grpc.CallOption) (*EditSubnetVlanResponse, error)
	EditSubnetDescription(ctx context.Context, in *EditSubnetDescriptionRequest, opts ...grpc.CallOption) (*EditSubnetDescriptionResponse, error)
}

type subnetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubnetServiceClient(cc grpc.ClientConnInterface) SubnetServiceClient {
	return &subnetServiceClient{cc}
}

func (c *subnetServiceClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*CreateSubnetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubnetResponse)
	err := c.cc.Invoke(ctx, SubnetService_CreateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) GetSubnets(ctx context.Context, in *GetSubnetsRequest, opts ...grpc.CallOption) (*GetSubnetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubnetsResponse)
	err := c.cc.Invoke(ctx, SubnetService_GetSubnets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) GetSubnetById(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubnetResponse)
	err := c.cc.Invoke(ctx, SubnetService_GetSubnetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) EditSubnetVlan(ctx context.Context, in *EditSubnetVlanRequest, opts ...grpc.CallOption) (*EditSubnetVlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditSubnetVlanResponse)
	err := c.cc.Invoke(ctx, SubnetService_EditSubnetVlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetServiceClient) EditSubnetDescription(ctx context.Context, in *EditSubnetDescriptionRequest, opts ...grpc.CallOption) (*EditSubnetDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditSubnetDescriptionResponse)
	err := c.cc.Invoke(ctx, SubnetService_EditSubnetDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubnetServiceServer is the server API for SubnetService service.
// All implementations must embed UnimplementedSubnetServiceServer
// for forward compatibility.
type SubnetServiceServer interface {
	CreateSubnet(context.Context, *CreateSubnetRequest) (*CreateSubnetResponse, error)
	GetSubnets(context.Context, *GetSubnetsRequest) (*GetSubnetsResponse, error)
	GetSubnetById(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	EditSubnetVlan(context.Context, *EditSubnetVlanRequest) (*EditSubnetVlanResponse, error)
	EditSubnetDescription(context.Context, *EditSubnetDescriptionRequest) (*EditSubnetDescriptionResponse, error)
	mustEmbedUnimplementedSubnetServiceServer()
}

// UnimplementedSubnetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubnetServiceServer struct{}

func (UnimplementedSubnetServiceServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedSubnetServiceServer) GetSubnets(context.Context, *GetSubnetsRequest) (*GetSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnets not implemented")
}
func (UnimplementedSubnetServiceServer) GetSubnetById(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnetById not implemented")
}
func (UnimplementedSubnetServiceServer) EditSubnetVlan(context.Context, *EditSubnetVlanRequest) (*EditSubnetVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSubnetVlan not implemented")
}
func (UnimplementedSubnetServiceServer) EditSubnetDescription(context.Context, *EditSubnetDescriptionRequest) (*EditSubnetDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSubnetDescription not implemented")
}
func (UnimplementedSubnetServiceServer) mustEmbedUnimplementedSubnetServiceServer() {}
func (UnimplementedSubnetServiceServer) testEmbeddedByValue()                       {}

// UnsafeSubnetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubnetServiceServer will
// result in compilation errors.
type UnsafeSubnetServiceServer interface {
	mustEmbedUnimplementedSubnetServiceServer()
}

func RegisterSubnetServiceServer(s grpc.ServiceRegistrar, srv SubnetServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubnetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubnetService_ServiceDesc, srv)
}

func _SubnetService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubnetService_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_GetSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).GetSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubnetService_GetSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).GetSubnets(ctx, req.(*GetSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_GetSubnetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).GetSubnetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubnetService_GetSubnetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).GetSubnetById(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_EditSubnetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSubnetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).EditSubnetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubnetService_EditSubnetVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).EditSubnetVlan(ctx, req.(*EditSubnetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubnetService_EditSubnetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSubnetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetServiceServer).EditSubnetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubnetService_EditSubnetDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetServiceServer).EditSubnetDescription(ctx, req.(*EditSubnetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubnetService_ServiceDesc is the grpc.ServiceDesc for SubnetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubnetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subnet.SubnetService",
	HandlerType: (*SubnetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet",
			Handler:    _SubnetService_CreateSubnet_Handler,
		},
		{
			MethodName: "GetSubnets",
			Handler:    _SubnetService_GetSubnets_Handler,
		},
		{
			MethodName: "GetSubnetById",
			Handler:    _SubnetService_GetSubnetById_Handler,
		},
		{
			MethodName: "EditSubnetVlan",
			Handler:    _SubnetService_EditSubnetVlan_Handler,
		},
		{
			MethodName: "EditSubnetDescription",
			Handler:    _SubnetService_EditSubnetDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subnet.proto",
}
