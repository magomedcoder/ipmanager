// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: ip.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IpService_GetIps_FullMethodName            = "/ip.IpService/GetIps"
	IpService_GetIpById_FullMethodName         = "/ip.IpService/GetIpById"
	IpService_EditIpCustomer_FullMethodName    = "/ip.IpService/EditIpCustomer"
	IpService_EditIpService_FullMethodName     = "/ip.IpService/EditIpService"
	IpService_EditIpDescription_FullMethodName = "/ip.IpService/EditIpDescription"
)

// IpServiceClient is the client API for IpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpServiceClient interface {
	GetIps(ctx context.Context, in *GetIpsRequest, opts ...grpc.CallOption) (*GetIpsResponse, error)
	GetIpById(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error)
	EditIpCustomer(ctx context.Context, in *EditIpCustomerRequest, opts ...grpc.CallOption) (*EditIpCustomerResponse, error)
	EditIpService(ctx context.Context, in *EditIpServiceRequest, opts ...grpc.CallOption) (*EditIpServiceResponse, error)
	EditIpDescription(ctx context.Context, in *EditIpDescriptionRequest, opts ...grpc.CallOption) (*EditIpDescriptionResponse, error)
}

type ipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpServiceClient(cc grpc.ClientConnInterface) IpServiceClient {
	return &ipServiceClient{cc}
}

func (c *ipServiceClient) GetIps(ctx context.Context, in *GetIpsRequest, opts ...grpc.CallOption) (*GetIpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsResponse)
	err := c.cc.Invoke(ctx, IpService_GetIps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) GetIpById(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpResponse)
	err := c.cc.Invoke(ctx, IpService_GetIpById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) EditIpCustomer(ctx context.Context, in *EditIpCustomerRequest, opts ...grpc.CallOption) (*EditIpCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditIpCustomerResponse)
	err := c.cc.Invoke(ctx, IpService_EditIpCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) EditIpService(ctx context.Context, in *EditIpServiceRequest, opts ...grpc.CallOption) (*EditIpServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditIpServiceResponse)
	err := c.cc.Invoke(ctx, IpService_EditIpService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) EditIpDescription(ctx context.Context, in *EditIpDescriptionRequest, opts ...grpc.CallOption) (*EditIpDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditIpDescriptionResponse)
	err := c.cc.Invoke(ctx, IpService_EditIpDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpServiceServer is the server API for IpService service.
// All implementations must embed UnimplementedIpServiceServer
// for forward compatibility.
type IpServiceServer interface {
	GetIps(context.Context, *GetIpsRequest) (*GetIpsResponse, error)
	GetIpById(context.Context, *GetIpRequest) (*GetIpResponse, error)
	EditIpCustomer(context.Context, *EditIpCustomerRequest) (*EditIpCustomerResponse, error)
	EditIpService(context.Context, *EditIpServiceRequest) (*EditIpServiceResponse, error)
	EditIpDescription(context.Context, *EditIpDescriptionRequest) (*EditIpDescriptionResponse, error)
	mustEmbedUnimplementedIpServiceServer()
}

// UnimplementedIpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpServiceServer struct{}

func (UnimplementedIpServiceServer) GetIps(context.Context, *GetIpsRequest) (*GetIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIps not implemented")
}
func (UnimplementedIpServiceServer) GetIpById(context.Context, *GetIpRequest) (*GetIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpById not implemented")
}
func (UnimplementedIpServiceServer) EditIpCustomer(context.Context, *EditIpCustomerRequest) (*EditIpCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditIpCustomer not implemented")
}
func (UnimplementedIpServiceServer) EditIpService(context.Context, *EditIpServiceRequest) (*EditIpServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditIpService not implemented")
}
func (UnimplementedIpServiceServer) EditIpDescription(context.Context, *EditIpDescriptionRequest) (*EditIpDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditIpDescription not implemented")
}
func (UnimplementedIpServiceServer) mustEmbedUnimplementedIpServiceServer() {}
func (UnimplementedIpServiceServer) testEmbeddedByValue()                   {}

// UnsafeIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpServiceServer will
// result in compilation errors.
type UnsafeIpServiceServer interface {
	mustEmbedUnimplementedIpServiceServer()
}

func RegisterIpServiceServer(s grpc.ServiceRegistrar, srv IpServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IpService_ServiceDesc, srv)
}

func _IpService_GetIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).GetIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_GetIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).GetIps(ctx, req.(*GetIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_GetIpById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).GetIpById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_GetIpById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).GetIpById(ctx, req.(*GetIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_EditIpCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditIpCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).EditIpCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_EditIpCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).EditIpCustomer(ctx, req.(*EditIpCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_EditIpService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditIpServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).EditIpService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_EditIpService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).EditIpService(ctx, req.(*EditIpServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_EditIpDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditIpDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).EditIpDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_EditIpDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).EditIpDescription(ctx, req.(*EditIpDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpService_ServiceDesc is the grpc.ServiceDesc for IpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ip.IpService",
	HandlerType: (*IpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIps",
			Handler:    _IpService_GetIps_Handler,
		},
		{
			MethodName: "GetIpById",
			Handler:    _IpService_GetIpById_Handler,
		},
		{
			MethodName: "EditIpCustomer",
			Handler:    _IpService_EditIpCustomer_Handler,
		},
		{
			MethodName: "EditIpService",
			Handler:    _IpService_EditIpService_Handler,
		},
		{
			MethodName: "EditIpDescription",
			Handler:    _IpService_EditIpDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ip.proto",
}
