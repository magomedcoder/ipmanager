// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/magomedcoder/ipmanager/api/pb"
	"github.com/magomedcoder/ipmanager/internal/config"
	"github.com/magomedcoder/ipmanager/internal/delivery/grpc/handler"
	"github.com/magomedcoder/ipmanager/internal/delivery/grpc/middleware"
	"github.com/magomedcoder/ipmanager/internal/infrastructure"
	"github.com/magomedcoder/ipmanager/internal/infrastructure/postgres/repository"
	"github.com/magomedcoder/ipmanager/internal/provider"
	"github.com/magomedcoder/ipmanager/internal/server"
	"github.com/magomedcoder/ipmanager/internal/usecase"
)

// Injectors from wire.go:

func NewGrpcInjector(conf *config.Config) *server.AppProvider {
	unimplementedUserServiceServer := pb.UnimplementedUserServiceServer{}
	db := provider.NewPostgresClient(conf)
	userRepository := repository.NewUserRepository(db)
	userSessionRepository := repository.NewUserSessionRepository(db)
	userUseCase := &usecase.UserUseCase{
		Conf:            conf,
		UserRepo:        userRepository,
		UserSessionRepo: userSessionRepository,
	}
	userHandler := &handler.UserHandler{
		UnimplementedUserServiceServer: unimplementedUserServiceServer,
		UserUseCase:                    userUseCase,
	}
	authMiddleware := middleware.AuthMiddleware{
		UserUseCase: userUseCase,
	}
	appProvider := &server.AppProvider{
		UserHandler: userHandler,
		Middleware:  authMiddleware,
	}
	return appProvider
}

// wire.go:

var ProviderSet = wire.NewSet(provider.NewPostgresClient, infrastructure.ProviderSet, usecase.ProviderSet)
