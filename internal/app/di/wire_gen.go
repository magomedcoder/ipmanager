// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/magomedcoder/ipmanager/api/pb"
	"github.com/magomedcoder/ipmanager/internal/cli"
	handler2 "github.com/magomedcoder/ipmanager/internal/cli/handler"
	"github.com/magomedcoder/ipmanager/internal/config"
	"github.com/magomedcoder/ipmanager/internal/delivery/grpc/handler"
	"github.com/magomedcoder/ipmanager/internal/delivery/grpc/middleware"
	"github.com/magomedcoder/ipmanager/internal/infrastructure"
	"github.com/magomedcoder/ipmanager/internal/infrastructure/postgres/repository"
	"github.com/magomedcoder/ipmanager/internal/provider"
	"github.com/magomedcoder/ipmanager/internal/usecase"
)

// Injectors from wire.go:

func NewGrpcInjector(conf *config.Config) *AppProvider {
	db := provider.NewPostgresClient(conf)
	userRepository := repository.NewUserRepository(db)
	userSessionRepository := repository.NewUserSessionRepository(db)
	userUseCase := &usecase.UserUseCase{
		Conf:            conf,
		UserRepo:        userRepository,
		UserSessionRepo: userSessionRepository,
	}
	authMiddleware := middleware.AuthMiddleware{
		UserUseCase: userUseCase,
	}
	unimplementedUserServiceServer := pb.UnimplementedUserServiceServer{}
	userHandler := &handler.UserHandler{
		UnimplementedUserServiceServer: unimplementedUserServiceServer,
		UserUseCase:                    userUseCase,
	}
	unimplementedIpServiceServer := pb.UnimplementedIpServiceServer{}
	ipRepository := repository.NewIPRepository(db)
	ipUseCase := &usecase.IpUseCase{
		Conf:   conf,
		IpRepo: ipRepository,
	}
	ipHandler := &handler.IpHandler{
		UnimplementedIpServiceServer: unimplementedIpServiceServer,
		IpUseCase:                    ipUseCase,
	}
	unimplementedCustomerServiceServer := pb.UnimplementedCustomerServiceServer{}
	customerRepository := repository.NewCustomerRepository(db)
	customerUseCase := &usecase.CustomerUseCase{
		Conf:         conf,
		CustomerRepo: customerRepository,
	}
	customerHandler := &handler.CustomerHandler{
		UnimplementedCustomerServiceServer: unimplementedCustomerServiceServer,
		CustomerUseCase:                    customerUseCase,
	}
	unimplementedVlanServiceServer := pb.UnimplementedVlanServiceServer{}
	vlanRepository := repository.NewVlanRepository(db)
	vlanUseCase := &usecase.VlanUseCase{
		Conf:     conf,
		VlanRepo: vlanRepository,
	}
	vlanHandler := &handler.VlanHandler{
		UnimplementedVlanServiceServer: unimplementedVlanServiceServer,
		VlanUseCase:                    vlanUseCase,
	}
	appProvider := &AppProvider{
		Middleware:      authMiddleware,
		UserHandler:     userHandler,
		IpHandler:       ipHandler,
		CustomerHandler: customerHandler,
		VlanHandler:     vlanHandler,
	}
	return appProvider
}

func NewCliInjector(conf *config.Config) *cli.AppProvider {
	db := provider.NewPostgresClient(conf)
	userRepository := repository.NewUserRepository(db)
	userSessionRepository := repository.NewUserSessionRepository(db)
	userUseCase := &usecase.UserUseCase{
		Conf:            conf,
		UserRepo:        userRepository,
		UserSessionRepo: userSessionRepository,
	}
	migrate := &handler2.Migrate{
		Conf:        conf,
		Db:          db,
		UserUseCase: userUseCase,
	}
	appProvider := &cli.AppProvider{
		Conf:    conf,
		Migrate: migrate,
	}
	return appProvider
}

// wire.go:

var ProviderSet = wire.NewSet(provider.NewPostgresClient, infrastructure.ProviderSet, usecase.ProviderSet)
